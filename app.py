import io
import requests
import numpy as np
import streamlit as st
from PIL import Image
import cv2
import matplotlib.pyplot as plt

# ---------------------------
# Helpers
# ---------------------------
def pil_to_cv(img_pil: Image.Image) -> np.ndarray:
    """PIL (RGB) -> OpenCV (BGR)"""
    return cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)

def cv_to_pil(img_cv: np.ndarray) -> Image.Image:
    """OpenCV (BGR) -> PIL (RGB)"""
    return Image.fromarray(cv2.cvtColor(img_cv, cv2.COLOR_BGR2RGB))

def load_image_from_url(url: str) -> Image.Image:
    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    return Image.open(io.BytesIO(resp.content)).convert("RGB")

def ensure_odd(n: int) -> int:
    return n if n % 2 == 1 else n + 1

# ---------------------------
# Streamlit UI
# ---------------------------
st.set_page_config(page_title="Image Processing", layout="wide")
st.title("üëÄü§≥üèæStreamlit Image Processing")

with st.sidebar:
    st.header("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
    source = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏†‡∏≤‡∏û", ["üì∑Webcam", "üì≤Upload", "üíªImage URL"], index=0)

    img = None
    if source == "üì∑Webcam":
        # ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏° (‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå)
        cap = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°")
        if cap is not None:
            img = Image.open(cap).convert("RGB")

    elif source == "üì≤Upload":
        up = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ (jpg/png)", type=["jpg", "jpeg", "png"])
        if up is not None:
            img = Image.open(up).convert("RGB")

    else:  # Image URL
        url = st.text_input("‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ ‡πÄ‡∏ä‡πà‡∏ô .jpg .png)", "")
        if st.button("‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL") and url.strip():
            try:
                img = load_image_from_url(url.strip())
            except Exception as e:
                st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    st.divider()
    st.header("‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå")
    st.caption("Brightness/Contrast ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏™‡∏°‡∏≠")
    alpha = st.slider("Contrast (alpha)", 0.5, 2.5, 1.0, 0.1)
    beta = st.slider("Brightness (beta)", -100, 100, 0, 1)

    op = st.selectbox(
        "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•",
        ["None", "Grayscale", "Gaussian Blur", "Canny Edge", "Threshold (Binary)"],
        index=0,
    )

    # ‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
    if op == "Gaussian Blur":
        k = st.slider("Kernel size (odd)", 1, 51, 9, 2)  # step 2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢
        k = ensure_odd(k)
    elif op == "Canny Edge":
        t1 = st.slider("Threshold 1", 0, 255, 100, 1)
        t2 = st.slider("Threshold 2", 0, 255, 200, 1)
    elif op == "Threshold (Binary)":
        thresh = st.slider("Threshold value", 0, 255, 127, 1)

# ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏¢‡∏±‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ï‡πà‡∏≠
if img is None:
    st.info("üëàüèº‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡∏ñ‡πà‡∏≤‡∏¢/‡∏ß‡∏≤‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
    st.stop()

# ---------------------------
# Processing
# ---------------------------
# Convert to OpenCV (BGR)
img_bgr = pil_to_cv(img)

# 1) ‡∏õ‡∏£‡∏±‡∏ö Brightness/Contrast
proc = cv2.convertScaleAbs(img_bgr, alpha=alpha, beta=beta)

# 2) ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å
if op == "Grayscale":
    proc = cv2.cvtColor(proc, cv2.COLOR_BGR2GRAY)
elif op == "Gaussian Blur":
    proc = cv2.GaussianBlur(proc, (k, k), 0)
elif op == "Canny Edge":
    gray = cv2.cvtColor(proc, cv2.COLOR_BGR2GRAY)
    proc = cv2.Canny(gray, t1, t2)
elif op == "Threshold (Binary)":
    gray = cv2.cvtColor(proc, cv2.COLOR_BGR2GRAY)
    _, proc = cv2.threshold(gray, thresh, 255, cv2.THRESH_BINARY)
# else: "None" ‚Üí ‡πÉ‡∏ä‡πâ proc ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

# ---------------------------
# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
# ---------------------------
col1, col2 = st.columns(2, gap="large")

with col1:
    st.subheader("‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")
    st.image(img, use_container_width=True)
    w, h = img.size
    st.caption(f"‡∏Ç‡∏ô‡∏≤‡∏î: {w}√ó{h} px")

with col2:
    st.subheader("‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
    if proc.ndim == 2:
        # grayscale/edge/threshold ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô RGB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ß‡∏¢ ‡πÜ
        show_img = cv2.cvtColor(proc, cv2.COLOR_GRAY2RGB)
    else:
        show_img = cv2.cvtColor(proc, cv2.COLOR_BGR2RGB)
    st.image(show_img, use_container_width=True)

    # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    out_pil = Image.fromarray(show_img)
    buf = io.BytesIO()
    out_pil.save(buf, format="PNG")
    st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (PNG)", data=buf.getvalue(), file_name="processed.png")

st.divider()

# ---------------------------
# ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (Histogram)
# ---------------------------
st.subheader("üìä Histogram ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• (Intensity)")

# ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Æ‡∏¥‡∏™‡πÇ‡∏ï‡πÅ‡∏Å‡∏£‡∏°
if proc.ndim == 3:
    gray_for_hist = cv2.cvtColor(proc, cv2.COLOR_BGR2GRAY)
else:
    gray_for_hist = proc

hist, bins = np.histogram(gray_for_hist.flatten(), bins=256, range=[0, 256])

fig = plt.figure(figsize=(7, 3.5))
plt.title("Intensity Histogram (0‚Äì255)")
plt.xlabel("Intensity")
plt.ylabel("Pixel Count")
plt.plot(hist)   # ‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
plt.xlim([0, 255])
st.pyplot(fig, use_container_width=True)

# ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
mean_val = float(gray_for_hist.mean())
std_val = float(gray_for_hist.std())
st.caption(f"Mean intensity: {mean_val:.2f} | Std: {std_val:.2f}")
